#!/bin/bash

# Task: mouse 10X scRNA-seq with varying cell number and sequencing depth
# Date: 20221013

#####################################################################
############################ Prepare the data #######################
#####################################################################
full_filename=e18_mouse_brain_fresh_5k_gex_possorted_bam
full_directory=/home/gayan/Projects/scATAC_Simulator/data/10X_MOUSE_BRAIN_ATACandRNA
directory=${full_directory}/split.${full_filename}
# mkdir ${directory}

# Tools directory
script_directory=/home/gayan/Projects/scATAC_Simulator/scripts/03092022/10X_MOUSE_BRAIN/RNA-seq
samtools_directory=/home/gayan/Tools/samtools/bin
macs3_directory=/home/gayan/.local/bin
bedtools_directory=/home/gayan/Tools/bedtools/bedtools2/bin
export PATH=${macs3_directory}:${samtools_directory}:${bedtools_directory}:${PATH}


#####################################################################
############################ Main Analysis #########################
#####################################################################

# User input parameter
# 1. BAM file (attached barcodes)
chr_title=chr1
filename=${full_filename}_${chr_title}
# outdirectory_old=~/Projects/scATAC_Simulator/results/20211126_${filename}_NONINPUT
outdirectory=~/Projects/scATAC_Simulator/results/20221013_${filename}_VaryNewCell

INPUT_bamfile=${directory}/${filename}.bam  
INPUT_cells_barcode_file=/home/gayan/Projects/scATAC_Simulator/data/10X_MOUSE_BRAIN_ATACandRNA/filtered_feature_bc_matrix/barcodes.tsv
OUTPUT_cells_barcode_file=${outdirectory}/synthetic_cell_barcode.txt
mkdir ${outdirectory}
cd ${outdirectory}
######################## Extract barcodes from BAM file ######################## 
# time(${samtools_directory}/samtools view ${full_directory}/${full_filename}.bam | cut -f 12- | tr "\t" "\n"  | grep  "^XC:Z:"  | cut -d ':' -f 3 | sort | uniq > ${directory}/${full_filename}.barcodes.txt)

######################## Reference feature set ######################## 
## MACS3 peak calling results
# Store as referenced-peak.bed
# Take complementary regions and stored as referenced-non-peak.bed 
# MACS3 call peaks
# macs3 callpeak -f BAMPE -t $INPUT_bamfile -g mm -n ${outdirectory}/${filename}.MACS3 -B -q 0.01
INPUT_ref_peak_directory=/home/gayan/Projects/scATAC_Simulator/data/mm10_ref_genome_GECODE/gene_region
feature_set_file=gencode.vM10.annotation.gene_region.${chr_title}.merged.bed
ref_peakfile=${filename}_peaks.bed
ref_comple_peakfile=${filename}_peaks.COMPLE.bed

# ${bedtools_directory}/bedtools sort -i ${INPUT_ref_peak_directory}/${feature_set_file}| ${bedtools_directory}/bedtools merge  > ${outdirectory}/${ref_peakfile}
# python3 ${script_directory}/NOINPUT_RNA_ComplePeakFunction.py ${chr_title} ${outdirectory} ${ref_peakfile} ${outdirectory} ${ref_comple_peakfile}
cp /home/gayan/Projects/scATAC_Simulator/results/20220608_e18_mouse_brain_fresh_5k_gex_possorted_bam_chr1_NONINPUT/${ref_peakfile} ${outdirectory}
cp /home/gayan/Projects/scATAC_Simulator/results/20220608_e18_mouse_brain_fresh_5k_gex_possorted_bam_chr1_NONINPUT/${ref_comple_peakfile} ${outdirectory}


######################## Generate Count matrix ######################## 
# Used real count matrix generated by NOINPUT_RNA_main_20221011_UMItranscript2.sh
## Construct assigned count matrix
#Extract referenced peaks set and convert to count matrices
# count_mat_filename=${filename}.countmatrix
# count_mat_comple_filename=${filename}.COMPLE.countmatrix
UMI_count_mat_filename=${filename}.UMI.countmatrix
UMI_count_mat_comple_filename=${filename}.UMI.COMPLE.countmatrix
count_mat_format=txt
# time(python3 ${script_directory}/NOINPUT_RNA_BAM2CountMatrix_new.py ${outdirectory} ${ref_peakfile} ${INPUT_bamfile} ${outdirectory} ${count_mat_filename}.${count_mat_format}) # 683m6.734s
# time(python3 ${script_directory}/NOINPUT_RNA_BAM2CountMatrix_new.py ${outdirectory} ${ref_comple_peakfile} ${INPUT_bamfile} ${outdirectory} ${count_mat_comple_filename}.${count_mat_format}) # 30m4.198s
# time(python3 ${script_directory}/NOINPUT_RNA_BAM2CountMatrix.py ${INPUT_cells_barcode_file} ${outdirectory} ${ref_peakfile} ${INPUT_bamfile} ${outdirectory} ${count_mat_filename}.${count_mat_format}) & time(python3 ${script_directory}/NOINPUT_RNA_BAM2CountMatrix.py ${INPUT_cells_barcode_file} ${outdirectory} ${ref_comple_peakfile} ${INPUT_bamfile} ${outdirectory} ${count_mat_comple_filename}.${count_mat_format}) # 30m4.198s
cp /home/gayan/Projects/scATAC_Simulator/results/20220926_e18_mouse_brain_fresh_5k_gex_possorted_bam_chr1_NONINPUT/${UMI_count_mat_filename}.txt ${outdirectory}
cp /home/gayan/Projects/scATAC_Simulator/results/20220926_e18_mouse_brain_fresh_5k_gex_possorted_bam_chr1_NONINPUT/${UMI_count_mat_comple_filename}.txt ${outdirectory}

## Train scDesign2 on reconstructed count matrix
# Synthetic matrix file named as filename.scDesign2Simulated.txt, note the first column with peak name is omitted 
#peaks set
time(Rscript ${script_directory}/NOINPUT_RNA_SyntheticUMIMat_VaryRDandCN_20221013.R 
# time(Rscript ${script_directory}/NOINPUT_RNA_SyntheticMat.R ${count_mat_filename} ${count_mat_format} ${outdirectory} ${outdirectory}) & time(Rscript ${script_directory}/NOINPUT_RNA_SyntheticMat.R ${count_mat_comple_filename} ${count_mat_format} ${outdirectory} ${outdirectory}) # 59min for 2165 peaks
# cp ${outdirectory_old}/e18_mouse_brain_fresh_5k_gex_possorted_bam_chr1.COMPLE.countmatrix.real.nReadRegionmargional.txt   ${outdirectory}
# cp ${outdirectory_old}/e18_mouse_brain_fresh_5k_gex_possorted_bam_chr1.COMPLE.countmatrix.scDesign2Simulated.nReadRegionmargional.txt   ${outdirectory}                                                                                 
# cp ${outdirectory_old}/e18_mouse_brain_fresh_5k_gex_possorted_bam_chr1.COMPLE.countmatrix.scDesign2Simulated.txt         ${outdirectory}                                                                                                         
# cp ${outdirectory_old}/${ref_peakfile} ${outdirectory_old}/${ref_comple_peakfile} ${outdirectory} 


######################## Generate BED file ######################## 
GeneateBED (){
  local adj_factor=$1
  echo "[VarySeqDepth] FACTOR ${adj_factor}: Generating Synthetic BED..."
  synthetic_UMI_count_mat_file=${UMI_count_mat_filename}.VarySeqDepth${adj_factor}.scDesign2Simulated.${count_mat_format}
  synthetic_UMI_count_mat_file_comple=${UMI_count_mat_comple_filename}.VarySeqDepth${adj_factor}.scDesign2Simulated.${count_mat_format}
  BED_filename_pre=${filename}.syntheticBAM.VarySeqDepth${adj_factor}
  BED_COMPLE_filename_pre=${filename}.syntheticBAM.VarySeqDepth${adj_factor}.COMPLE
  BED_filename_combined_pre=${filename}.syntheticBAM.VarySeqDepth${adj_factor}.combined
  OUTPUT_cells_barcode_file=${outdirectory}/synthetic_cell_barcode.VarySeqDepth${adj_factor}.txt
  # Gene region
  python3 ${script_directory}/NOINPUT_RNA_GenerateBAMCoord_20221011_UMITranscriptLevel2.py ${outdirectory}/${ref_peakfile} ${synthetic_UMI_count_mat_file} ${BED_filename_pre}.read.bed ${INPUT_bamfile} ${outdirectory} ${OUTPUT_cells_barcode_file}
  # Inter-gene region
  python3 ${script_directory}/NOINPUT_RNA_GenerateBAMCoord_20221011_UMITranscriptLevel2.py ${outdirectory}/${ref_comple_peakfile} ${synthetic_UMI_count_mat_file_comple} ${BED_COMPLE_filename_pre}.read.bed ${INPUT_bamfile} ${outdirectory} ${OUTPUT_cells_barcode_file}
  # Combine whole-genome regions
  cat ${outdirectory}/${BED_filename_pre}.read.bed ${outdirectory}/${BED_COMPLE_filename_pre}.read.bed | sort -k1,1 -k2,2n > ${outdirectory}/${BED_filename_combined_pre}.read.bed
  echo "[VarySeqDepth] FACTOR ${adj_factor}: Generate Synthetic BED done!"
}
for adj_factor in 0.25 0.5 1 2 4; do GeneateBED "$adj_factor" & done
# for adj_factor in 0.125 0.25 0.5 1 2 4 8; do GeneateBED "$adj_factor" & done
# for adj_factor in 8; do GeneateBED "$adj_factor" & done

GeneateBED_varyCell (){
  local adj_factor=$1
  echo "[VaryCellNumber] FACTOR ${adj_factor}: Generating Synthetic BED..."
  synthetic_UMI_count_mat_file=${UMI_count_mat_filename}.VaryCellNumber${adj_factor}.scDesign2Simulated.${count_mat_format}
  synthetic_UMI_count_mat_file_comple=${UMI_count_mat_comple_filename}.VaryCellNumber${adj_factor}.scDesign2Simulated.${count_mat_format}
  BED_filename_pre=${filename}.syntheticBAM.VaryCellNumber${adj_factor}
  BED_COMPLE_filename_pre=${filename}.syntheticBAM.VaryCellNumber${adj_factor}.COMPLE
  BED_filename_combined_pre=${filename}.syntheticBAM.VaryCellNumber${adj_factor}.combined
  OUTPUT_cells_barcode_file=${outdirectory}/synthetic_cell_barcode.VaryCellNumber${adj_factor}.txt
  # Gene region
  python3 ${script_directory}/NOINPUT_RNA_GenerateBAMCoord_20221011_UMITranscriptLevel2.py ${outdirectory}/${ref_peakfile} ${synthetic_UMI_count_mat_file} ${BED_filename_pre}.read.bed ${INPUT_bamfile} ${outdirectory} ${OUTPUT_cells_barcode_file}
  # Inter-gene region
  python3 ${script_directory}/NOINPUT_RNA_GenerateBAMCoord_20221011_UMITranscriptLevel2.py ${outdirectory}/${ref_comple_peakfile} ${synthetic_UMI_count_mat_file_comple} ${BED_COMPLE_filename_pre}.read.bed ${INPUT_bamfile} ${outdirectory} ${OUTPUT_cells_barcode_file}
  # Combine whole-genome regions
  cat ${outdirectory}/${BED_filename_pre}.read.bed ${outdirectory}/${BED_COMPLE_filename_pre}.read.bed | sort -k1,1 -k2,2n > ${outdirectory}/${BED_filename_combined_pre}.read.bed
  echo "[VaryCellNumber] FACTOR ${adj_factor}: Generate Synthetic BED done!"
}
# for adj_factor in 0.125 0.25 0.5 1 2 4 8; do GeneateBED_varyCell "$adj_factor" & done
for adj_factor in 0.25 0.5 1 2 4 ; do GeneateBED_varyCell "$adj_factor" & done

######################## Generate FASTQ file ######################## 
referenceGenome_name=GRCm38.primary_assembly.genome
referenceGenome_dir=/home/gayan/Projects/scATAC_Simulator/data/mm10_ref_genome_GECODE
referenceGenome_file=${referenceGenome_dir}/${referenceGenome_name}.fa

# Vary SEQ
GeneateFASTQ_VarySeq (){
  local adj_factor=$1
  BED_filename_pre=${filename}.syntheticBAM.VarySeqDepth${adj_factor}
  BED_COMPLE_filename_pre=${filename}.syntheticBAM.VarySeqDepth${adj_factor}.COMPLE
  BED_filename_combined_pre=${filename}.syntheticBAM.VarySeqDepth${adj_factor}.combined
  time(bedtools getfasta -s -nameOnly -fi ${referenceGenome_file} -bed  ${outdirectory}/${BED_filename_combined_pre}.read.bed -fo ${outdirectory}/${BED_filename_combined_pre}.read2.strand.bed2fa.fa) # 4 mins
  sed '/^>/s/.\{3\}$//' ${outdirectory}/${BED_filename_combined_pre}.read2.strand.bed2fa.fa > ${outdirectory}/${BED_filename_combined_pre}.read2.bed2fa.fa # remove (-)
  # Create read 1 in fasta 
  time(awk 'NR%2==0 {print substr(p,2,26);} NR%2 {p=$0;print p;}' ${outdirectory}/${BED_filename_combined_pre}.read2.bed2fa.fa > ${outdirectory}/${BED_filename_combined_pre}.read1.bed2fa.fa)
  ## Convert fasta to fastq
  # ~/Tools/seqtk/seqtk/seqtk seq -F '#' ~/Projects/scATAC_Simulator/data/bedTobam_output/BoneMarrow_62016_chr1.bed2fa.fa > ~/Projects/scATAC_Simulator/data/bedTobam_output/BoneMarrow_62016_chr1.bed2fa.fq
  time(~/Tools/seqtk/seqtk/seqtk seq -F 'F' ${outdirectory}/${BED_filename_combined_pre}.read1.bed2fa.fa > ${outdirectory}/${BED_filename_combined_pre}.read1.bed2fa.fq)
  time(~/Tools/seqtk/seqtk/seqtk seq -F 'F' ${outdirectory}/${BED_filename_combined_pre}.read2.bed2fa.fa > ${outdirectory}/${BED_filename_combined_pre}.read2.bed2fa.fq)
  time(cat ${outdirectory}/${BED_filename_combined_pre}.read1.bed2fa.fq | paste - - - - | sort -k1,1 -S 3G | tr '\t' '\n' > ${outdirectory}/${BED_filename_combined_pre}.read1.bed2fa.sorted.fq)
  time(cat ${outdirectory}/${BED_filename_combined_pre}.read2.bed2fa.fq | paste - - - - | sort -k1,1 -S 3G | tr '\t' '\n' > ${outdirectory}/${BED_filename_combined_pre}.read2.bed2fa.sorted.fq)
}
for adj_factor in 0.25 0.5 1 2 4; do GeneateFASTQ_VarySeq "$adj_factor" & done

# Vary cell
GeneateFASTQ_VaryCell (){
  local adj_factor=$1
  BED_filename_pre=${filename}.syntheticBAM.VaryCellNumber${adj_factor}
  BED_COMPLE_filename_pre=${filename}.syntheticBAM.VaryCellNumber${adj_factor}.COMPLE
  BED_filename_combined_pre=${filename}.syntheticBAM.VaryCellNumber${adj_factor}.combined
  time(bedtools getfasta -s -nameOnly -fi ${referenceGenome_file} -bed  ${outdirectory}/${BED_filename_combined_pre}.read.bed -fo ${outdirectory}/${BED_filename_combined_pre}.read2.strand.bed2fa.fa) # 4 mins
  sed '/^>/s/.\{3\}$//' ${outdirectory}/${BED_filename_combined_pre}.read2.strand.bed2fa.fa > ${outdirectory}/${BED_filename_combined_pre}.read2.bed2fa.fa # remove (-)
  # Create read 1 in fasta 
  time(awk 'NR%2==0 {print substr(p,2,26);} NR%2 {p=$0;print p;}' ${outdirectory}/${BED_filename_combined_pre}.read2.bed2fa.fa > ${outdirectory}/${BED_filename_combined_pre}.read1.bed2fa.fa)
  ## Convert fasta to fastq
  # ~/Tools/seqtk/seqtk/seqtk seq -F '#' ~/Projects/scATAC_Simulator/data/bedTobam_output/BoneMarrow_62016_chr1.bed2fa.fa > ~/Projects/scATAC_Simulator/data/bedTobam_output/BoneMarrow_62016_chr1.bed2fa.fq
  time(~/Tools/seqtk/seqtk/seqtk seq -F 'F' ${outdirectory}/${BED_filename_combined_pre}.read1.bed2fa.fa > ${outdirectory}/${BED_filename_combined_pre}.read1.bed2fa.fq)
  time(~/Tools/seqtk/seqtk/seqtk seq -F 'F' ${outdirectory}/${BED_filename_combined_pre}.read2.bed2fa.fa > ${outdirectory}/${BED_filename_combined_pre}.read2.bed2fa.fq)
  time(cat ${outdirectory}/${BED_filename_combined_pre}.read1.bed2fa.fq | paste - - - - | sort -k1,1 -S 3G | tr '\t' '\n' > ${outdirectory}/${BED_filename_combined_pre}.read1.bed2fa.sorted.fq)
  time(cat ${outdirectory}/${BED_filename_combined_pre}.read2.bed2fa.fq | paste - - - - | sort -k1,1 -S 3G | tr '\t' '\n' > ${outdirectory}/${BED_filename_combined_pre}.read2.bed2fa.sorted.fq)
}
for adj_factor in 0.25 0.5 1 2 4; do GeneateFASTQ_VaryCell "$adj_factor" & done



######################## Generate BAM file ######################## 
GeneateBAM_VarySeq (){
    local adj_factor=$1
    BED_filename_pre=${filename}.syntheticBAM.VarySeqDepth${adj_factor}
    BED_COMPLE_filename_pre=${filename}.syntheticBAM.VarySeqDepth${adj_factor}.COMPLE
    BED_filename_combined_pre=${filename}.syntheticBAM.VarySeqDepth${adj_factor}.combined
    output_BAM_pre=${BED_filename_pre}
    bowtie2_directory=~/Tools/bowtie2
    time(bowtie2 -x ${referenceGenome_dir}/${referenceGenome_name} -U ${outdirectory}/${BED_filename_combined_pre}.read2.bed2fa.sorted.fq -S ${outdirectory}/${output_BAM_pre}.synthetic.${chr_title}.noCB.sam) # 151m37.660s
    ${samtools_directory}/samtools view -S -b ${outdirectory}/${output_BAM_pre}.synthetic.${chr_title}.noCB.sam > ${outdirectory}/${output_BAM_pre}.synthetic.${chr_title}.noCB.bam
    # Create CB and UB tag
    # ${samtools_directory}/samtools view ${outdirectory}/${output_BAM_pre}.synthetic.${chr_title}.noCB.bam | cut -f1 | cut -d':' -f1 | awk '{s=substr($1,1,16)}{g=substr($1,17,length($1))}{printf "CB:Z:%s\tUB:Z:%s\n",s,g;}'
    time(${samtools_directory}/samtools view ${outdirectory}/${output_BAM_pre}.synthetic.${chr_title}.noCB.bam -H > ${outdirectory}/${output_BAM_pre}.synthetic.${chr_title}.noCB.header.sam)
    time(cat <( cat ${outdirectory}/${output_BAM_pre}.synthetic.${chr_title}.noCB.header.sam ) \
    <( paste <(${samtools_directory}/samtools view ${outdirectory}/${output_BAM_pre}.synthetic.${chr_title}.noCB.bam ) <(${samtools_directory}/samtools view ${outdirectory}/${output_BAM_pre}.synthetic.${chr_title}.noCB.bam | cut -f1 | cut -d':' -f1 | awk '{s=substr($1,1,16)}{g=substr($1,17,length($1))}{printf "CB:Z:%s\tUB:Z:%s\n",s,g;}')) | ${samtools_directory}/samtools view -bS - > ${outdirectory}/${output_BAM_pre}.synthetic.${chr_title}.bam)
    rm ${outdirectory}/${output_BAM_pre}.synthetic.${chr_title}.noCB.header.sam 
    # Convert sam to bam
    # ${samtools_directory}/samtools view -S -b ${outdirectory}/${output_BAM_pre}.synthetic.${chr_title}.sam > ${outdirectory}/${output_BAM_pre}.synthetic.${chr_title}.bam
    ${samtools_directory}/samtools sort ${outdirectory}/${output_BAM_pre}.synthetic.${chr_title}.bam > ${outdirectory}/${output_BAM_pre}.synthetic.${chr_title}.sorted.bam
    ${samtools_directory}/samtools index ${outdirectory}/${output_BAM_pre}.synthetic.${chr_title}.sorted.bam
}
# for adj_factor in 0.125 0.25 0.5 1 2 4 8; do GeneateBAM "$adj_factor" & done
for adj_factor in 0.25 0.5 1 2 4; 
do 
  GeneateBAM_VarySeq "$adj_factor"
done


GeneateBAM_varyCell (){
  local adj_factor=$1
  BED_filename_pre=${filename}.syntheticBAM.VaryCellNumber${adj_factor}
  BED_COMPLE_filename_pre=${filename}.syntheticBAM.VaryCellNumber${adj_factor}.COMPLE
  BED_filename_combined_pre=${filename}.syntheticBAM.VaryCellNumber${adj_factor}.combined
  output_BAM_pre=${BED_filename_pre}
  time(bowtie2 -x ${referenceGenome_dir}/${referenceGenome_name} -U ${outdirectory}/${BED_filename_combined_pre}.read2.bed2fa.sorted.fq -S ${outdirectory}/${output_BAM_pre}.synthetic.${chr_title}.noCB.sam) # 151m37.660s
  ${samtools_directory}/samtools view -S -b ${outdirectory}/${output_BAM_pre}.synthetic.${chr_title}.noCB.sam > ${outdirectory}/${output_BAM_pre}.synthetic.${chr_title}.noCB.bam
  # Create CB and UB tag
  # ${samtools_directory}/samtools view ${outdirectory}/${output_BAM_pre}.synthetic.${chr_title}.noCB.bam | cut -f1 | cut -d':' -f1 | awk '{s=substr($1,1,16)}{g=substr($1,17,length($1))}{printf "CB:Z:%s\tUB:Z:%s\n",s,g;}'
  time(${samtools_directory}/samtools view ${outdirectory}/${output_BAM_pre}.synthetic.${chr_title}.noCB.bam -H > ${outdirectory}/${output_BAM_pre}.synthetic.${chr_title}.noCB.header.sam)
  time(cat <( cat ${outdirectory}/${output_BAM_pre}.synthetic.${chr_title}.noCB.header.sam ) \
  <( paste <(${samtools_directory}/samtools view ${outdirectory}/${output_BAM_pre}.synthetic.${chr_title}.noCB.bam ) <(${samtools_directory}/samtools view ${outdirectory}/${output_BAM_pre}.synthetic.${chr_title}.noCB.bam | cut -f1 | cut -d':' -f1 | awk '{s=substr($1,1,16)}{g=substr($1,17,length($1))}{printf "CB:Z:%s\tUB:Z:%s\n",s,g;}')) | ${samtools_directory}/samtools view -bS - > ${outdirectory}/${output_BAM_pre}.synthetic.${chr_title}.bam)
  rm ${outdirectory}/${output_BAM_pre}.synthetic.${chr_title}.noCB.header.sam 
  # Convert sam to bam
  # ${samtools_directory}/samtools view -S -b ${outdirectory}/${output_BAM_pre}.synthetic.${chr_title}.sam > ${outdirectory}/${output_BAM_pre}.synthetic.${chr_title}.bam
  ${samtools_directory}/samtools sort ${outdirectory}/${output_BAM_pre}.synthetic.${chr_title}.bam > ${outdirectory}/${output_BAM_pre}.synthetic.${chr_title}.sorted.bam
  ${samtools_directory}/samtools index ${outdirectory}/${output_BAM_pre}.synthetic.${chr_title}.sorted.bam
}
for adj_factor in 0.25 0.5 1 2 4; do GeneateBAM_varyCell "$adj_factor" & done


######################## Downsample VaryCell to the same cell number ######################## 
## Split BAM manually
foo () {
    local adj_factor=$1
    BED_filename_pre=${filename}.syntheticBAM.VaryCellNumber${adj_factor}
    BED_COMPLE_filename_pre=${filename}.syntheticBAM.VaryCellNumber${adj_factor}.COMPLE
    BED_filename_combined_pre=${filename}.syntheticBAM.VaryCellNumber${adj_factor}.combined
    output_BAM_pre=${BED_filename_pre}
    cur_BAMfile=${outdirectory}/${output_BAM_pre}.synthetic.${chr_title}.sorted.bam
    time(samtools view $cur_BAMfile -H > ${outdirectory}/header.sam)
    time(cat <( cat ${outdirectory}/header.sam) \
    <(samtools view $cur_BAMfile | grep -f synthetic_cell_barcode.VaryCellNumber${adj_factor}.Downsample1219.txt) | samtools view -bS - > ${outdirectory}/${output_BAM_pre}.synthetic.${chr_title}.Downsample1219.sorted.bam)
}
for split_prop in 0.5 1 2 4; do foo "$split_prop" & done

sortBAM_foo () {
  local adj_factor=$1
  BED_filename_pre=${filename}.syntheticBAM.VaryCellNumber${adj_factor}
  BED_COMPLE_filename_pre=${filename}.syntheticBAM.VaryCellNumber${adj_factor}.COMPLE
  BED_filename_combined_pre=${filename}.syntheticBAM.VaryCellNumber${adj_factor}.combined
  output_BAM_pre=${BED_filename_pre}
  # mv ${outdirectory}/${output_BAM_pre}.synthetic.${chr_title}.Downsample1219.sorted.bam ${outdirectory}/${output_BAM_pre}.synthetic.${chr_title}.Downsample1219.unsorted.bam
  # ${samtools_directory}/samtools sort ${outdirectory}/${output_BAM_pre}.synthetic.${chr_title}.Downsample1219.unsorted.bam > ${outdirectory}/${output_BAM_pre}.synthetic.${chr_title}.Downsample1219.sorted.bam
  ${samtools_directory}/samtools index ${outdirectory}/${output_BAM_pre}.synthetic.${chr_title}.Downsample1219.sorted.bam
}
for adj_factor in 0.5 1 2 4; do sortBAM_foo "$adj_factor" & done


