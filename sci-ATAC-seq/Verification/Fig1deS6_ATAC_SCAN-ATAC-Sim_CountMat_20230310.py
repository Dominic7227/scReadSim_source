# Generate Count Matrix for SCAN-ATAC-Sim reads (in bed file)
# Python start here
import pandas as pd
import csv
import numpy as np
from collections import defaultdict
from tqdm import tqdm

####################################################################################
######################## Prepare SCAN-ATAC-Sim Count Matrix file ##################
####################################################################################
cell_type_selection_list = ["Hematopoieticprogenitors", "Erythroblasts", "Monocytes", "ImmatureBcells"]
ncell_list = [1621, 1153, 531, 296]
SCANATACSim_output_dir = "/home/gayan/Projects/scATAC_Simulator/results/20230304_SCANATACSim/SCANATACSim_output"
peak_list = "/home/gayan/Projects/scATAC_Simulator/results/20221130_BoneMarrow_62016_chr1_NONINPUT/BoneMarrow_62016_chr1.MACS3_peaks.bed"
with open(peak_list) as open_peak:
            reader = csv.reader(open_peak, delimiter="\t")
            open_peak = np.asarray(list(reader))

for cell_type_id in range(4):
    cell_type = cell_type_selection_list[cell_type_id]
    cells_n = ncell_list[cell_type_id]
    reads_list = pd.read_csv("%s/%s.SCAN-ATAC-Sim.bed" % (SCANATACSim_output_dir, cell_type), delimiter="\t", header=None)
    cells = ["cell_" + str(i) for i in range(cells_n)]
    k = 0
    cellsdic = defaultdict(lambda: [None])
    for cell in cells:
        cellsdic[cell] = k
        k += 1
    k = 0
    peaksdic = defaultdict(lambda: [None])
    for rec in open_peak:
        rec_name = '_'.join(rec)
        peaksdic[rec_name] = k
        k += 1
    print("Converting count matrix for celltype: %s ...\n" % cell_type)
    with open("%s/%s.SCAN-ATAC-Sim.CountMatrix.txt" % (SCANATACSim_output_dir, cell_type), 'w') as outsfile:
        for rec_id in tqdm(range(len(open_peak))):
            rec = open_peak[rec_id]
            rec_name = '_'.join(rec)
            currcounts = [0]*cells_n
            overlap_read_list = reads_list[(reads_list[5] < int(rec[2])) & (reads_list[6] > int(rec[1]))]
            if not overlap_read_list.empty:
                for cell in overlap_read_list[10].values.tolist():
                    if cell in cells:
                        try:
                            currcounts[cellsdic[cell]] += 1
                        except KeyError:
                            pass
            print(rec_name + "\t" + "\t".join([str(x) for x in currcounts]),file = outsfile)


####################################################################################
############################ Prepare scReadSim Count Matrix file #######################
####################################################################################
# Generate Count matrix for four-cell-type scReadSim bam file
##  process cell type file
import scReadSim.Utility as Utility
# Specify the path to bed files generated by Utility.scATAC_CreateFeatureSets
cells = pd.read_csv("/home/gayan/Projects/scATAC_Simulator/results/20221130_BoneMarrow_62016_chr1_NONINPUT/synthetic_cell_barcode.txt.withSynthCluster", delimiter="\t",  names=['cell', 'cell_type'])
cells["cell_type_splitted"] = cells["cell_type"].str.split(".", expand=True)[0]
cells["cell"] = cells["cell"].astype(str)
outdirectory="/home/gayan/Projects/scATAC_Simulator/results/20230304_SCANATACSim"
cell_type_selection_list = ["Hematopoietic progenitors", "Erythroblasts", "Monocytes", "Immature B cells"]
## Write out cell barcode file
cells.loc[cells["cell_type_splitted"].isin(cell_type_selection_list)][['cell', 'cell_type_splitted']].to_csv(outdirectory + "/CBwithCellType.noCBZ.HematopoieticProgenitor_Erythroblasts_Monocytes_ImmatureB.scReadSim.txt", sep="\t", header=False, index=False)
cells.loc[cells["cell_type_splitted"].isin(cell_type_selection_list)][['cell']].to_csv(outdirectory + "/CB.noCBZ.HematopoieticProgenitor_Erythroblasts_Monocytes_ImmatureB.scReadSim.txt", sep="\t", header=False, index=False)
# Specify the output count matrices' prenames
peak_bedfile = peak_list
INPUT_bamfile="/home/gayan/Projects/scATAC_Simulator/results/20230304_SCANATACSim/HematopoieticProgenitor_Erythroblasts_Monocytes_ImmatureB.scReadSim.forReadCounting.sorted.bam"
INPUT_cells_barcode_file="/home/gayan/Projects/scATAC_Simulator/results/20230304_SCANATACSim/CB.noCBZ.HematopoieticProgenitor_Erythroblasts_Monocytes_ImmatureB.scReadSim.txt"
count_mat_peak_filename = "HematopoieticProgenitor_Erythroblasts_Monocytes_ImmatureB.scReadSim.CountMatrix"
# Construct count matrix for peaks
Utility.scATAC_bam2countmat_paral(cells_barcode_file=INPUT_cells_barcode_file, bed_file=peak_bedfile, INPUT_bamfile=INPUT_bamfile, outdirectory="/home/gayan/Projects/scATAC_Simulator/results/20230304_SCANATACSim", count_mat_filename=count_mat_peak_filename, n_cores=8)

####################################################################################
############################ Prepare Real Count Matrix file #######################
####################################################################################
# Generate Count matrix for four-cell-type scReadSim bam file
##  process cell type file
import scReadSim.Utility as Utility
outdirectory = "/home/gayan/Projects/scATAC_Simulator/results/20230304_SCANATACSim"
# Specify the path to bed files generated by Utility.scATAC_CreateFeatureSets
cells = pd.read_csv("/home/gayan/Projects/scATAC_Simulator/data/sciATAC_MouseAtlas/cell_metadata_bonemarrow.csv", delimiter="\t")
cells["cell"] = cells["cell"].astype(str)
# cells["cell_label"].value_counts() 
cell_type_selection_list = ["Hematopoietic progenitors", "Erythroblasts", "Monocytes", "Immature B cells"]
## Write out cell barcode file for four celltypes
cells.loc[cells["cell_label"].isin(cell_type_selection_list)][['cell', 'cell_label']].to_csv(outdirectory + "/CBwithCellType.noCBZ.HematopoieticProgenitor_Erythroblasts_Monocytes_ImmatureB.Real.txt", sep="\t", header=False, index=False)
cells.loc[cells["cell_label"].isin(cell_type_selection_list)][['cell']].to_csv(outdirectory + "/CB.noCBZ.HematopoieticProgenitor_Erythroblasts_Monocytes_ImmatureB.Real.txt", sep="\t", header=False, index=False)
# Specify the output count matrices' prenames
peak_bedfile = peak_list
INPUT_bamfile="/home/gayan/Projects/scATAC_Simulator/results/20230304_SCANATACSim/HematopoieticProgenitor_Erythroblasts_Monocytes_ImmatureB.Real.sorted.bam"
INPUT_cells_barcode_file="/home/gayan/Projects/scATAC_Simulator/results/20230304_SCANATACSim/CB.noCBZ.HematopoieticProgenitor_Erythroblasts_Monocytes_ImmatureB.Real.txt"
count_mat_peak_filename = "HematopoieticProgenitor_Erythroblasts_Monocytes_ImmatureB.Real.CountMatrix"
# Construct count matrix for peaks
Utility.scATAC_bam2countmat_paral(cells_barcode_file=INPUT_cells_barcode_file, bed_file=peak_bedfile, INPUT_bamfile=INPUT_bamfile, outdirectory="/home/gayan/Projects/scATAC_Simulator/results/20230304_SCANATACSim", count_mat_filename=count_mat_peak_filename, n_cores=8)



